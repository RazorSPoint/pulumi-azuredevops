diff --git a/helper/schema/schema.go b/helper/schema/schema.go
index 69ab09b7..881b2ebb 100644
--- a/helper/schema/schema.go
+++ b/helper/schema/schema.go
@@ -223,9 +223,12 @@ type Schema struct {
 	//
 	// AtLeastOneOf is a set of schema keys that, when set, at least one of
 	// the keys in that list must be specified.
+	//
+	// RequiredWith is a set of schema keys that must be set simultaneously.
 	ConflictsWith []string
 	ExactlyOneOf  []string
 	AtLeastOneOf  []string
+	RequiredWith  []string
 
 	// When Deprecated is set, this attribute is deprecated.
 	//
@@ -773,6 +776,13 @@ func (m schemaMap) internalValidate(topSchemaMap schemaMap, attrsOnly bool) erro
 			}
 		}
 
+		if len(v.RequiredWith) > 0 {
+			err := checkKeysAgainstSchemaFlags(k, v.RequiredWith, topSchemaMap)
+			if err != nil {
+				return fmt.Errorf("RequiredWith: %+v", err)
+			}
+		}
+
 		if len(v.ExactlyOneOf) > 0 {
 			err := checkKeysAgainstSchemaFlags(k, v.ExactlyOneOf, topSchemaMap)
 			if err != nil {
@@ -1414,6 +1424,11 @@ func (m schemaMap) validate(
 			"%q: this field cannot be set", k)}
 	}
 
+	err = validateRequiredWithAttribute(k, schema, c)
+	if err != nil {
+		return nil, []error{err}
+	}
+
 	// If the value is unknown then we can't validate it yet.
 	// In particular, this avoids spurious type errors where downstream
 	// validation code sees UnknownVariableValue as being just a string.
@@ -1494,6 +1509,27 @@ func removeDuplicates(elements []string) []string {
 	return result
 }
 
+func validateRequiredWithAttribute(
+	k string,
+	schema *Schema,
+	c *terraform.ResourceConfig) error {
+
+	if len(schema.RequiredWith) == 0 {
+		return nil
+	}
+
+	allKeys := removeDuplicates(append(schema.RequiredWith, k))
+	sort.Strings(allKeys)
+
+	for _, key := range allKeys {
+		if _, ok := c.Get(key); !ok {
+			return fmt.Errorf("%q: all of `%s` must be specified", k, strings.Join(allKeys, ","))
+		}
+	}
+
+	return nil
+}
+
 func validateExactlyOneAttribute(
 	k string,
 	schema *Schema,
